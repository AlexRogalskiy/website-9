{"version":3,"sources":["webpack:///./src/pages/services.js","webpack:///./node_modules/node-fetch/browser.js"],"names":["ServicesPage","state","services","search","componentDidMount","fetch","then","data","json","setState","updateSearch","this","render","query","toLowerCase","trim","shownServices","filter","e","name","includes","title","className","type","onChange","evt","target","value","placeholder","map","service","key","src","icons","svg","alt","length","style","textAlign","Component","global","self","window","Error","getGlobal","module","exports","bind","Headers","Request","Response"],"mappings":"wLAOMA,E,4JACJC,MAAQ,CACNC,SAAU,GACVC,OAAQ,I,oHAGVC,kBAAA,WAAqB,IAAD,OAElBC,IAAM,yDACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAJ,GACJ,EAAKO,SAAS,CACZP,iB,EAKRQ,aAAA,SAAaP,GACXQ,KAAKF,SAAS,CACZN,Y,EAIJS,OAAA,WAAU,IAAD,SACsBD,KAAKV,MAA1BC,EADD,EACCA,SAAUC,EADX,EACWA,OAEZU,EAAQV,EAAOW,cAAcC,OAE7BC,EAAgBb,EACpBD,EAASe,QAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAKL,cAAcM,SAASP,MACjDX,EAEJ,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKmB,MAAM,aAEX,yBAAKC,UAAW,sBACZ,yBAAKA,UAAW,WACZ,yBAAKA,UAAW,SACd,wCACA,oFAGF,2BACEC,KAAK,OACLC,SAAU,SAAAC,GAAG,OAAI,EAAKf,aAAae,EAAIC,OAAOC,QAC9CC,YAAY,SACZN,UAAW,eAGb,yBAAKA,UAAW,gBACbN,EAAca,KAAI,SAAAC,GAAO,OACxB,yBAAKR,UAAW,eAAgBS,IAAKD,EAAQC,KACzC,yBAAKT,UAAW,QACZ,yBACEU,IAAKF,EAAQG,MAAMC,IACnBC,IAAQL,EAAQX,KAAb,UAEL,2BAAIW,EAAQX,aAMtBH,EAAcoB,QACd,6BACE,uBAAGC,MAAO,CAAEC,UAAW,WAAvB,qHAGA,yBAAKhB,UAAW,6BACd,yBACEU,IAAI,0FACJG,IAAI,wBAEN,mD,GA1EKI,aAuFZvC,a,iCC5Ff,EAAQ,IAER,IAmBIwC,EAnBY,WAId,GAAoB,oBAATC,KACT,OAAOA,KAGT,GAAsB,oBAAXC,OACT,OAAOA,OAGT,QAAsB,IAAXF,EACT,OAAOA,EAGT,MAAM,IAAIG,MAAM,kCAGLC,GACbC,EAAOC,QAAUA,EAAUN,EAAOnC,MAElCyC,EAAiB,QAAIN,EAAOnC,MAAM0C,KAAKP,GACvCM,EAAQE,QAAUR,EAAOQ,QACzBF,EAAQG,QAAUT,EAAOS,QACzBH,EAAQI,SAAWV,EAAOU","file":"component---src-pages-services-js-db7e82a7eb771c6cd9ad.js","sourcesContent":["import React, { Component } from \"react\"\n\nimport fetch from 'node-fetch'\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nclass ServicesPage extends Component {\n  state = {\n    services: [],\n    search: '',\n  }\n\n  componentDidMount() {\n    // Get list of services from GitHub\n    fetch('https://cdn.jsdelivr.net/gh/getferdi/recipes/all.json')\n      .then(data => data.json())\n      .then(services => {\n        this.setState({\n          services,\n        });\n      })\n  }\n\n  updateSearch(search) {\n    this.setState({\n      search,\n    });\n  }\n\n  render() {\n    const { services, search } = this.state;\n\n    const query = search.toLowerCase().trim();\n\n    const shownServices = search ?\n      services.filter(e => e.name.toLowerCase().includes(query))\n      : services;\n\n    return (\n      <Layout>\n        <SEO title=\"Services\"/>\n\n        <div className={\"container services\"}>\n            <div className={\"targets\"}>\n                <div className={\"title\"}>\n                  <h2>Services</h2>\n                  <p>Ferdi is compatible with all your favourite services</p>\n                </div>\n\n                <input\n                  type=\"text\"\n                  onChange={evt => this.updateSearch(evt.target.value)}\n                  placeholder=\"Search\"\n                  className={\"search-box\"}\n                />\n\n                <div className={\"service-grid\"}>\n                  {shownServices.map(service => (\n                    <div className={\"service-item\"} key={service.key}>\n                        <div className={\"item\"}>\n                            <img \n                              src={service.icons.svg}\n                              alt={`${service.name} logo`}\n                            />\n                            <p>{service.name}</p>\n                        </div>\n                    </div>\n                  ))}\n                </div>\n\n                {!shownServices.length && (\n                  <div>\n                    <p style={{ textAlign: 'center' }}>\n                      It looks like this service is not yet part of Ferdi - but you can still add it using the \"Custom Website\" option!\n                    </p>\n                    <div className={\"service-not-found-service\"}>\n                      <img \n                        src=\"https://cdn.jsdelivr.net/gh/getferdi/recipes/uncompressed/franz-custom-website/icon.svg\"\n                        alt=\"Custom website logo\"\n                      />\n                      <p>Custom Website</p>\n                    </div>\n                  </div>\n                )}\n\n            </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\n\nexport default ServicesPage\n","\"use strict\"; // ref: https://github.com/tc39/proposal-global\n\nrequire(\"core-js/modules/es6.function.bind\");\n\nvar getGlobal = function getGlobal() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  throw new Error('unable to locate global object');\n};\n\nvar global = getGlobal();\nmodule.exports = exports = global.fetch; // Needed for TypeScript and Webpack.\n\nexports[\"default\"] = global.fetch.bind(global);\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;"],"sourceRoot":""}