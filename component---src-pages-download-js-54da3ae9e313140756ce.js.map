{"version":3,"sources":["webpack:///./src/pages/download.js","webpack:///./node_modules/node-fetch/browser.js"],"names":["DownloadPage","state","release","mac","win","linuxAppImage","linuxDeb","os","componentDidMount","this","getOS","setState","getLatestRelease","Promise","resolve","fetch","then","data","json","name","platform","window","navigator","indexOf","test","fullOSName","render","title","className","href","Component","global","self","Error","getGlobal","module","exports","bind","Headers","Request","Response"],"mappings":"8KAMMA,E,4JACFC,MAAQ,CACJC,QAAS,GACTC,IAAK,GACLC,IAAK,GACLC,cAAe,GACfC,SAAU,GACVC,GAAI,I,oHAGRC,kBAAA,WAEI,IACMD,EAAKE,KAAKC,QAEhBD,KAAKE,SAAS,CACVT,QAJY,QAKZC,IAAI,6EACJC,IAAI,mFACJC,cAAc,kFACdC,SAAS,mFACTC,Q,EAIRK,iBAAA,WACI,OAAO,IAAIC,SAAQ,SAAAC,GACfC,IAAM,+DACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GAAI,OAAIH,EAAQG,EAAKE,a,EAInCT,MAAA,WACI,IAGIH,EAHEa,EAAWC,OAAOC,UAAUF,SAalC,OAR0C,IAJnB,CAAC,YAAa,WAAY,SAAU,UAIxCG,QAAQH,GACzBb,EAAK,OAC4C,IAL1B,CAAC,QAAS,QAAS,UAAW,SAK3BgB,QAAQH,GAClCb,EAAK,OACKA,GAAM,QAAQiB,KAAKJ,KAC7Bb,EAAK,SAGAA,G,EAGXkB,WAAA,SAAWlB,GACP,OAAOA,GACH,IAAK,MACD,MAAO,MACX,IAAK,MACD,MAAO,UACX,IAAK,QACD,MAAO,QACX,QACI,MAAO,K,EAInBmB,OAAA,WAAU,IAAD,EAQDjB,KAAKR,MANLC,EAFC,EAEDA,QACAC,EAHC,EAGDA,IACAC,EAJC,EAIDA,IACAC,EALC,EAKDA,cACAC,EANC,EAMDA,SACAC,EAPC,EAODA,GAGJ,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKoB,MAAM,aACX,yBAAKC,UAAW,aACZ,yBAAKA,UAAW,WACZ,yBAAKA,UAAW,SACZ,8CAAoB1B,IAGtBK,GACE,yBAAKqB,UAAW,UACZ,yBAAKA,UAAW,mBACH,UAAPrB,EACE,uBAAGsB,KAAMpB,KAAKR,MAAMM,IAApB,gBAAwCE,KAAKgB,WAAWlB,IAExD,oCACI,uBAAGsB,KAAMxB,GAAT,yBAAgDI,KAAKgB,WAAWlB,IAChE,uBAAGsB,KAAMvB,GAAT,iCAQnBC,GAAM,wBAAIqB,UAAW,gBAAf,iBAEP,yBAAKA,UAAW,OACZ,yBAAKA,UAAW,SACZ,yBAAKA,UAAW,mBACZ,uBAAGC,KAAMzB,GAAT,0BAGR,yBAAKwB,UAAW,SACZ,yBAAKA,UAAW,mBACZ,uBAAGC,KAAM1B,GAAT,uBAKZ,yBAAKyB,UAAW,OACZ,yBAAKA,UAAW,SACZ,yBAAKA,UAAW,mBACZ,uBAAGC,KAAMxB,GAAT,6BAGR,yBAAKuB,UAAW,SACZ,yBAAKA,UAAW,mBACZ,uBAAGC,KAAMvB,GAAT,qC,GAzHTwB,aAqIZ9B,a,iCCzIf,EAAQ,IAER,IAmBI+B,EAnBY,WAId,GAAoB,oBAATC,KACT,OAAOA,KAGT,GAAsB,oBAAXX,OACT,OAAOA,OAGT,QAAsB,IAAXU,EACT,OAAOA,EAGT,MAAM,IAAIE,MAAM,kCAGLC,GACbC,EAAOC,QAAUA,EAAUL,EAAOhB,MAElCqB,EAAiB,QAAIL,EAAOhB,MAAMsB,KAAKN,GACvCK,EAAQE,QAAUP,EAAOO,QACzBF,EAAQG,QAAUR,EAAOQ,QACzBH,EAAQI,SAAWT,EAAOS","file":"component---src-pages-download-js-54da3ae9e313140756ce.js","sourcesContent":["import React, { Component } from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport fetch from 'node-fetch'\n\nclass DownloadPage extends Component {\n    state = {\n        release: '',\n        mac: '',\n        win: '',\n        linuxAppImage: '',\n        linuxDeb: '',\n        os: '',\n    }\n\n    componentDidMount() {\n        // const version = await this.getLatestRelease();\n        const version = '5.3.3';\n        const os = this.getOS();\n\n        this.setState({\n            release: version,\n            mac: `https://github.com/getferdi/ferdi/releases/download/v${version}/Ferdi-${version}.dmg`,\n            win: `https://github.com/getferdi/ferdi/releases/download/v${version}/Ferdi.Setup.${version}.exe`,\n            linuxAppImage: `https://github.com/getferdi/ferdi/releases/download/v${version}/Ferdi.${version}.AppImage`,\n            linuxDeb: `https://github.com/getferdi/ferdi/releases/download/v${version}/ferdi_${version}_amd64.deb`,\n            os,\n        });\n    }\n\n    getLatestRelease() {\n        return new Promise(resolve => {\n            fetch('https://api.github.com/repos/getferdi/ferdi/releases/latest')\n            .then(data => data.json())\n            .then(data => resolve(data.name))\n        })\n    }\n\n    getOS() {\n        const platform = window.navigator.platform;\n        const macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'];\n        const windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'];\n        let os;\n      \n        if (macosPlatforms.indexOf(platform) !== -1) {\n          os = 'mac';\n        } else if (windowsPlatforms.indexOf(platform) !== -1) {\n          os = 'win';\n        } else if (!os && /Linux/.test(platform)) {\n          os = 'linux';\n        }\n      \n        return os;\n    }\n\n    fullOSName(os) {\n        switch(os) {\n            case 'mac':\n                return 'Mac';\n            case 'win':\n                return 'Windows';\n            case 'linux':\n                return 'Linux';\n            default:\n                return '';\n        }\n    }\n\n    render() {\n        const {\n            release,\n            mac,\n            win,\n            linuxAppImage,\n            linuxDeb,\n            os,\n        } = this.state;\n\n        return (\n            <Layout>\n                <SEO title=\"Download\"/>\n                <div className={\"container\"}>\n                    <div className={\"content\"}>\n                        <div className={\"title\"}>\n                            <h1>Download Ferdi {release}</h1>\n                        </div>\n\n                        { os && (\n                            <div className={\"center\"}>\n                                <div className={\"download-button\"}>\n                                    { os !== 'linux' ? (\n                                        <a href={this.state[os]}>Download for { this.fullOSName(os) }</a>\n                                    ) : (\n                                        <>\n                                            <a href={linuxAppImage}>Download AppImage for { this.fullOSName(os) }</a>\n                                            <a href={linuxDeb}>Download for Ubuntu (.deb)</a>\n                                        </>\n                                    )}\n                                    \n                                </div>\n                            </div>\n                        ) }\n\n                        {os && <h2 className={\"download-all\"}>All platforms</h2>}\n\n                        <div className={\"row\"}>\n                            <div className={\"col-6\"}>\n                                <div className={\"download-button\"}>\n                                    <a href={win}>Download for Windows</a>\n                                </div>\n                            </div>\n                            <div className={\"col-6\"}>\n                                <div className={\"download-button\"}>\n                                    <a href={mac}>Download for Mac</a>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className={\"row\"}>\n                            <div className={\"col-6\"}>\n                                <div className={\"download-button\"}>\n                                    <a href={linuxAppImage}>Download Linux AppImage</a>\n                                </div>\n                            </div>\n                            <div className={\"col-6\"}>\n                                <div className={\"download-button\"}>\n                                    <a href={linuxDeb}>Download for Ubuntu (.deb)</a>\n                                </div>\n                            </div>\n                        </div>\n                        \n                    </div>\n                </div>\n            </Layout>\n        );\n    }\n}\n\nexport default DownloadPage\n","\"use strict\"; // ref: https://github.com/tc39/proposal-global\n\nrequire(\"core-js/modules/es6.function.bind\");\n\nvar getGlobal = function getGlobal() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  throw new Error('unable to locate global object');\n};\n\nvar global = getGlobal();\nmodule.exports = exports = global.fetch; // Needed for TypeScript and Webpack.\n\nexports[\"default\"] = global.fetch.bind(global);\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;"],"sourceRoot":""}